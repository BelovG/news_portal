.row-fluid
  .span10.offset1
    h2.center
      | Тестовое задание:
      br
      | Краудсорсинговый новостной портал
    h5.center Суть: новостной сайт, где новости предлагают пользователи.
    br
    h3 1. Авторизация пользователей
    ul
      li
        | Пользователь должен иметь возможность регистрироваться, входить и выходить из своего аккаунта.
      li
        | При регистрации пользователь помимо email указывает свое отображаемое имя.
      li
        | Регистрация не обязательна для просмотра статей и написания комментариев.
      li
        | Использовать гем devise.

    h3 2. Статьи
    | Зарегистрированный пользователь должен иметь возможность написать статью.
    br
    | Статья состоит из:
    ul
      li
        | заголовка
      li
        | анонса (краткое описание)
      li
        | тела статьи

    p В статье можно использовать разметку, вставлять картинки и видео с youtube. Это делается с помощью Redactor.

    p Статьи относятся к категориям (политика, спорт, культура, …). То есть, отношение многие-ко-многим (пример).

    p После создания статьи она ожидает модерации и не отображается на главной странице.

    | На главной странице должен быть выбор категории.
    br
    | Статьи сортируются по дате создания (свежие-сверху).
    br
    | Статьи должны разбиваться на страницы (kaminari или will_paginate).

    h3 3. Комментарии
    p К статьям можно оставлять комментарии. К комментариям тоже можно оставлять комментарии. Регистрация пользователя необязательна.

    p Рядом с комментарием должно указываться имя комментатора и время.

    h3 4. Подписки
    | Зарегистрированный пользователь должен иметь возможность подписаться на новости определенной категории. Если он это сделал, то ему на почту должны приходить письма с анонсами статей и ссылкой на полную статью.
    | Пользователь должен иметь возможность отписаться от рассылки, перейдя по прямой ссылке из письма. Должно работать, даже если пользователь не залогинен.
    | Рассылку нужно реализовать ориентированной на highload.

    h3 5. Админка
    | Некоторые пользователи являются админами.
    | Админ должен иметь возможность удалить любую статью или комментарий (для него показывается ссылка на удаление около статьи/комментария).
    | Должна быть админка, реализованная с помощью ActiveAdmin.
    | Главная страница админки должна показывать:
    ul
      li кол-во статей
      li кол-во зарегистрированных пользователей всего
      li кол-во зарегистрированных пользователей сегодня
    | Должен быть раздел управления статьями, где статью можно подтвердить, отклонить или удалить.
    | После подтверждения или отклонения статьи автор должен получить соответствующее письмо.

    h3 Условия
    ul
      li Ruby On Rails 4
      li БД - postgresql, в том числе в development окружении
      li Код должен быть залит на github
      li Все письма в приложении должны отправляться асинхронно (с помощью sidekiq или delayed_job)
      li Использовать bootstrap в качестве фронтэнд-фреймворка
      li Должен быть seed-файл, который создаст все необходимые объекты для тестирования

    h3 Бонусные задания
    ul
      li Полнотекстовый поиск статей с помощью Sphinx. С подсветкой искомой части.
      li Авторизация пользователей через соц. сети через omniauth
      li Теги для статей с поиском статей по тегам
      li Предпросмотр статей перед созданием
      li Использовать в качестве шаблонизатора slim
      li Удаление статей и комментариев с помощью AJAX (для админа)
      li Выложить все это на Heroku и дать ссылку (в этом случае полнотекстовый поиск на продакшне можно отключить, т.к. на хероку он платный)

    h3 Оценивается
    ul
      li Скорость реализации
      li Понимание ТЗ и выявление скрытых тонкостей
      li Внешний вид интерфейса
      li Качество кода и архитектуры
      li Читабельность кода и комментарии
      li Сделать бонусные задания - круче, чем их не сделать, даже если на это уйдет больше времени
